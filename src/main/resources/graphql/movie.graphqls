type Movie {
    id: ID
    title: String
    year: Int
    trailer: String
    rated: String
    released: String
    runtime: String
    genre: [String]
    director: String
    writer: String
    actors: String
    plot: String
    languages: String
    country: String
    awards: String
    poster: String
    metascore: Int
    imdbRating: String
    imdbVotes: Int
    type: String
    response: Boolean
    images: String
}

input MovieInput {
    title: String
    year: Int
    trailer: String
    rated: String
    released: String
    runtime: String
    genre: [String]
    director: String
    writer: String
    actors: String
    plot: String
    languages: String
    country: String
    awards: String
    poster: String
    metascore: Int
    imdbRating: String
    imdbVotes: Int
    type: String
    response: Boolean
    images: String
}

type MovieByCategory {
    category: String
    movies: [Movie]
}

# Profile
type Profile {
    id: ID!
    userId: ID!
    name: String!
    avatar: String
    status: String!
    type: String!
    password: String
    description: String
}

input ProfileInput {
    userId: ID!
    name: String
    avatar: String
    status: String
    type: String!
    password: String
    description: String
}

type Query {
    getAllMovie(page: Int, pageSize: Int, filter: String, sort: String): [Movie]
    getMovieByCategory: [MovieByCategory]
    getMovieById(id: ID!): Movie

    getAllProfile: [Profile]
    getProfileById(id: ID!): [Profile]
    getAllProfileByUserId(id: ID!): [Profile]
}

type Mutation {
    createMovie(movie: MovieInput!): Movie
    updateMovie(id: ID!, movie: MovieInput!): Boolean
    deleteMovie(id: ID!): Boolean

    createProfile(profile: ProfileInput!): Profile
    updateProfile(id: ID!, profile: ProfileInput!): Boolean
    deleteProfile(id: ID!): Boolean
}