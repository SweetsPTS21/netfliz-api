type Movie {
    id: ID!
    title: String!
    year: Int!
    trailer: String
    rated: String!
    released: String!
    runtime: String!
    genre: String!
    director: String!
    writer: String!
    actors: String!
    plot: String!
    languages: String
    country: String!
    awards: String!
    poster: String!
    metascore: Int
    imdbRating: String
    imdbVotes: Int
    type: String!
    response: Boolean!
    images: [String]
}

input MovieInput {
    title: String
    year: Int
    trailer: String
    rated: String
    released: String
    runtime: String
    genre: String
    director: String
    writer: String
    actors: String
    plot: String
    language: String
    country: String
    awards: String
    poster: String
    metascore: Int
    imdbRating: String
    imdbVotes: Int
    type: String
    response: Boolean
    images: [String]
}

type MovieByCategory {
    category: String
    movies: [Movie]
}

# Profile
type Profile {
    id: ID!
    userId: ID!
    name: String!
    avatar: String
    status: String!
    type: String!
    password: String
    description: String
}

input ProfileInput {
    userId: ID!
    name: String
    avatar: String
    status: String
    type: String!
    password: String
    description: String
}

type Query {
    getAllMovie: [Movie]
    getMovieByCategory: [MovieByCategory]
    getMovieById(movieId: ID!): Movie

    getAllProfile: [Profile]
    getProfileById(profileId: ID!): [Profile]
    getAllProfileByUserId(userId: ID!): [Profile]
}

type Mutation {
    createMovie(movie: MovieInput!): Movie
    updateMovie(movieId: ID!, movie: MovieInput!): Movie
    deleteMovie(movieId: ID!): Boolean

    createProfile(profile: ProfileInput!): Profile
    updateProfile(profileId: ID!, profile: ProfileInput!): Boolean
    deleteProfile(profileId: ID!): Boolean
}